---
FSM:
  initial:
    _description: Connection was just established
    HandShake: login_requested
  login_requested:
    _description: Server is verifying login
    LoginChallenge: login_requested
    LoginAccept: loading
    Disconnect: disconnected
  loading:
    _description: Client is receiving data and preparing to spawn
    Load: loading
    Ping: loading
    Spawn: spawned
    Disconnect: disconnected
  spawned:
    _description: Client has spawned
    Load: spawned
    Ping: spawned
    GamePlay: spawned
    Disconnect: disconnected
    WorldSwitch: loading
  disconnected:
    _description: Connection is terminated

TYPES:
  int_pos:
    x: int32
    y: int32
    z: int32
  float_pos:
    x: float32
    y: float32
    z: float32
  cube_pos:
    batch: int_pos
    local_x: nibble
    local_y: nibble
    local_z: nibble
    _nop_1: true
  cube_precise_pos:
    batch: int_pos
    local_x: nibble
    local_y: nibble
    local_z: nibble
    face: nibble
    precise_x: float32
    precise_y: float32
  rotation:
    yaw: float32
    pitch: float32
  flex_pos:
    batch: int_pos
    local: float_pos
    yaw: float32
    pitch: float32

HandShake:
  _class: ll
  LOGIN_REQUEST:
    _description: >
      Establishes a connection.
      The server should disconnect the client if majorProtocol is inconsistent.
      The client is responsible for supporting all older minorProtocol versions of the same majorProtocol version.
      username is the display name requested by the user.
      userId is a client-generated identifier similar to cookies.
      language is a code in the format xx_XX to indicate the locale.
      sysInfo is a JSON object containing the following keys:
      nothing yet)
    _direction: CS
    majorProtocol: uint32
    minorProtocol: uint32
    username: string
    userId: byte:20
    language: string
    sysInfo: string:json
LoginChallenge:
  _class: ll
  LOGIN_EXTERNAL_QUESTION:
    _description: >
      The client should request the user to login via the specified method.
      The following methods should be supported:
      CubePump.GitHubLogin
      Question payload contains a "url" string to redirect user to.
      Upon authentication, the client is redirected by GitHub to send a GET request on the server.
      The server should use the `state` parameter to identify the client.
      more to be added)
    _direction: SC
    method: string
    payload: string:json
  LOGIN_EXTERNAL_ANSWER:
    _description: Response to LOGIN_EXTERNAL_QUESTION. This may not need to be sent.
      The contents are specified in LOGIN_EXTERNAL_QUESTION.
    _direction: CS
    payload: string:json
LoginAccept:
  _class: ll
  LOGIN_ACCEPT:
    _description: >
      Server acknowledges that a connection could be established.
      minorProtocol lets the client determine whether the server supports new features.
      Client is assumed to be usually more updated than server in this protocol design.
      domain is the official hostname of the server, which might be different from the IP used for connection.
      The client may verify this domain in the future.
    _direction: SC
    minorProtocol: uint32
    domain: string
Disconnect:
  _class: ll
  SERVER_DISCONNECT:
    _description: >
      The client is kicked from the server.
      The client should display `message` and suspend world rendering.
      The client should automatically re-establish the connection after `rejoin` milliseconds if it is non-negative.
    _direction: SC
    message: string
    rejoin: int32
    _nop_1: true
  CLIENT_DISCONNECT:
    _description: Sent when the client clicks a disconnect button. This may not necessarily
      be sent when the client leaves.
    _direction: CS
Ping:
  _class: ll
  PING:
    _description: >
      This is sent when a party wants to know the latency of the connection. This may be regularly sent.
      `id` is a random integer.
    _direction: MT
    id: int64
  PONG:
    _description: Sent in response to PING. `id` should be identical to the one in the corresponding PING.
    _direction: MT
    id: int64
Load:
  _class: pk
  CUBE_TYPE_DEF:
    _description: >
      Defines a list of cube types. May overwrite previous definitions.
      cubeDef.id is the temporal integer key to the cube type.
      cubeDef.name is a string identifying the cube model. Names should be in the format `{pack}#{name}`.
      Asset packs are downloaded from the URL specified in {pack} (only HTTP and HTTPS protocols are allowed),
      and {name} is the name of the cube model inside the asset pack.
      Caching policies are subject to the HTTP protocol.
    _direction: SC
    cubeDef:
      _list: prefix:uvint32
      id: uvint32
      name: string
  CUBE_BATCH:
    _description: >
      Sends the contents of a cube batch.
      The protocol uses right-handed Cartesian coordinate system, where y-axis points upward (pitch: 90)
      and z-axis points to the direction of south (yaw: 0)
      Yaw is measured clockwise in radians.
      The payload has an inconsistent size that makes up 4096 varints. The varints are encoded in this structure:
      for y from 0 to 15
      for x from 0 to 15
      for z from 0 to 15
      write(id)
    _direction: SC
    pos: int_pos
    payload:
      _list: const:4096
      id: uvint32
Spawn:
  _class: pk
  SPAWN:
    _description: >
      The client should display the world when this signal arrives.
      `pos` is the position at which the client should spawn.
      (current time - `eventTime`) nanoseconds is the time epoch of the game.
      All events are measured using this epoch protocol.
      When the client receives an event before the client-side clock reaches the `eventTime` of the event (message too early),
      the client should queue the event to be dispatched.
      When the client receives an event after the client-side clock reaches the `eventTime` of the event (message too late),
      the client should interpolate the impacts of the event as if it was received early.
      Particularly useful for motion events.
    _direction: SC
    pos: flex_pos
    eventTime: uvint64
GamePlay:
  _class: pk
  CUBE_UPDATE:
    _description: >
      The client should modify the content of the specified cube as soon as possible
    _direction: SC
    pos: cube_pos
    updateType: uvint32
  CUBE_INTERACT:
    _description: >
      If the client is using an action button and the actively clicked position is changed
      or some blocks changed in the click ray trace, this signal is sent to update the clicked position.
    _direction: CS
    pos: cube_precise_pos
    eventTime: uvint64
  ACTION_MASK:
    _description: >
      Updates the action mask used by the client.
      Note that keyboard[1-5] correspond to the keys "zxcvb" by default, and may be configured by the user.
    _direction: CS
    screenTouch: bool
    leftClick: bool
    rightClick: bool
    keyboard1: bool
    keyboard2: bool
    keyboard3: bool
    keyboard4: bool
    keyboard5: bool
    keyboardShift: bool
    keyboardTab: bool
    keyboardSpace: bool
    _nop_1: true
    eventTime: uvint64
  FLEX_MOTION:
    _description: >
      The specified flex should be interpolated to start moving from the specified position at the provided event time.
    _direction: SC
    flexId: uvint32
    from: optional:flex_pos
    velocity: optional:float_pos
    rotation: optional:rotation
    eventTime: uvint64
  USER_MOTION:
    _description: >
      The client sends this signal when the user requests to move.
      The dash flag is determined by the client locally.
    _direction: CS
    yaw: float32
    dash: bool
    _nop_1: true
  USER_ROTATION:
    _description: >
      The client sends this signal when the user changes their rotation.
      This action is automatically performed client-side, but can be rejected by server by sending a new FLEX_MOTION
    _direction: CS
    yaw: float32
    pitch: float32
    eventTime: uvint64
  FLEX_FLAGS:
    _description: >
      The client should change the rendering of the specified flex based on the new flags
    _direction: SC
    crouch: bool
    _nop_1: true
